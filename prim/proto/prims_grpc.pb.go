// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: prims.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrimServiceClient is the client API for PrimService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrimServiceClient interface {
	Primaries(ctx context.Context, in *PrimRequest, opts ...grpc.CallOption) (PrimService_PrimariesClient, error)
}

type primServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrimServiceClient(cc grpc.ClientConnInterface) PrimServiceClient {
	return &primServiceClient{cc}
}

func (c *primServiceClient) Primaries(ctx context.Context, in *PrimRequest, opts ...grpc.CallOption) (PrimService_PrimariesClient, error) {
	stream, err := c.cc.NewStream(ctx, &PrimService_ServiceDesc.Streams[0], "/prim.PrimService/Primaries", opts...)
	if err != nil {
		return nil, err
	}
	x := &primServicePrimariesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PrimService_PrimariesClient interface {
	Recv() (*PrimResponse, error)
	grpc.ClientStream
}

type primServicePrimariesClient struct {
	grpc.ClientStream
}

func (x *primServicePrimariesClient) Recv() (*PrimResponse, error) {
	m := new(PrimResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PrimServiceServer is the server API for PrimService service.
// All implementations must embed UnimplementedPrimServiceServer
// for forward compatibility
type PrimServiceServer interface {
	Primaries(*PrimRequest, PrimService_PrimariesServer) error
	mustEmbedUnimplementedPrimServiceServer()
}

// UnimplementedPrimServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPrimServiceServer struct {
}

func (UnimplementedPrimServiceServer) Primaries(*PrimRequest, PrimService_PrimariesServer) error {
	return status.Errorf(codes.Unimplemented, "method Primaries not implemented")
}
func (UnimplementedPrimServiceServer) mustEmbedUnimplementedPrimServiceServer() {}

// UnsafePrimServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrimServiceServer will
// result in compilation errors.
type UnsafePrimServiceServer interface {
	mustEmbedUnimplementedPrimServiceServer()
}

func RegisterPrimServiceServer(s grpc.ServiceRegistrar, srv PrimServiceServer) {
	s.RegisterService(&PrimService_ServiceDesc, srv)
}

func _PrimService_Primaries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrimServiceServer).Primaries(m, &primServicePrimariesServer{stream})
}

type PrimService_PrimariesServer interface {
	Send(*PrimResponse) error
	grpc.ServerStream
}

type primServicePrimariesServer struct {
	grpc.ServerStream
}

func (x *primServicePrimariesServer) Send(m *PrimResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PrimService_ServiceDesc is the grpc.ServiceDesc for PrimService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrimService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prim.PrimService",
	HandlerType: (*PrimServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Primaries",
			Handler:       _PrimService_Primaries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "prims.proto",
}
